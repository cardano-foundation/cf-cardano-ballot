spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev--pre-prod-alice}

hydra.participant.number=${HYDRA_PARTICIPANT_NUMBER:0}
hydra.participants.count=${HYDRA_PARTICIPANTS_COUNT:3}

hydra.ws.url=ws://dev.cf-hydra-voting-poc.metadata.dev.cf-deployments.org:4001

# docker-compose exec cardano-node cardano-cli address build --payment-verification-key-file /devnet/credentials/alice.vk --testnet-magic 42
cardano.commit.address=addr_test1vru2drx33ev6dt8gfq245r5k0tmy7ngqe79va69de9dxkrg09c7d3

# docker-compose exec cardano-node cardano-cli query utxo --address addr_test1vztc80na8320zymhjekl40yjsnxkcvhu58x59mc2fuwvgkc332vxv --testnet-magic 42
cardano.commit.utxo=d2e63f56ab88c3ca31d3bb32b3bfa959b0bd522929932d45fe500f2e2bcf4463#0

cardano.commit.amount=1000000000
votes.path=classpath:votes/votes.csv
hydra.operator.name=alice
hydra.operator.secret.file.path=secrets/hydra-alice-secret.json

# TODO Hydra-Tally-App on Hydra 0.10.x
# - write a new smart contract for tallying with a new aiken 0.0.19-alpha
# - implement off-chain for vote batching (map) with new contract
# - implement off-chain for vote reduction (reduce) with new contract
# - make sure all is working end to end on dev-net with final result as datum ending up on L1 (dev-net)
# - implement parametrised scripts, each category = separate smart contract
# - implement reading results from L1 contract via datums. We may need to map category hashes from datums to category names / proposals
# - [BONUS] merge and release: https://github.com/cardano-foundation/hydra-java hydra-java 0.0.7
