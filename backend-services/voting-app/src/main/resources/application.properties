spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/postgres}
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=none
jpa.show.sql=${JPA_SHOW_SQL:false}

spring.flyway.locations=classpath:db/migration/{vendor}
spring.flyway.out-of-order=true

spring.flyway.url=${DB_URL:jdbc:postgresql://localhost:5432/postgres}
spring.flyway.user=${DB_USERNAME:postgres}
spring.flyway.password=${DB_PASSWORD:postgres}
# baselineOnMigrate this will create a baseline version if none exists (https://flywaydb.org/documentation/configuration/parameters/baselineOnMigrate)
spring.flyway.baselineOnMigrate=true
spring.flyway.enabled=true

spring.banner.location=classpath:/banner.txt

# disable static content handling
spring.web.resources.add-mappings=false
spring.mvc.throw-exception-if-no-handler-found=true
# force charset in request and responses
server.servlet.encoding.force=true

cardano.network=${CARDANO_NETWORK:PREPROD}

spring.main.allow-bean-definition-overriding=true

endpoints.health.enabled=${HEALTH_ENABLED:true}
management.endpoints.web.exposure.include=${WEB_EXPOSURE_INCLUDE:health,info,prometheus,metrics,scheduledtasks,flyway}
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINT_SHOW_DETAILS:always}

l1.transaction.metadata.label=${VOTING_METADATA_LABEL:11113}

blockfrost.url=${BLOCKFROST_URL:https://blockfrost-api.pro.dandelion-preprod.eu-west-1.metadata.dev.cf-deployments.org}
blockfrost.api.key=${BLOCKFROST_PASSWORD:password}

cardano-client-lib.backend.type=${CLI_BACKEND:BLOCKFROST}

organiser.account.mnemonic=${ORGANISER_MNEMONIC_PHRASE:ocean sad mixture disease faith once celery mind clay hidden brush brown you sponsor dawn good claim gloom market world online twist laptop thrive}

cardano.tx.submit.api.url=${TX_SUBMIT_URL:https://submit-api.pro.dandelion-preprod.eu-west-1.metadata.dev.cf-deployments.org/api/submit/tx}

# comma separated list of event ids that this app will be running
bind.on.event.ids=${BIND_ON_EVENT_IDS:CIP-1694_Pre_Ratification_4619}

transaction.submission.timeout.minutes=${TRANSACTION_SUBMISSION_TIMEOUT_MINUTES:1}
transaction.submission.sleep.seconds=${TRANSACTION_SUBMISSION_SLEEP_SECONDS:10}

# run every 10 minutes, in prod should be more like every 30 minutes
vote.commitment.cron.expression=0 0/10 * * * ?
#vote.commitment.cron.expression=${VOTE_COMMITMENT_CRON_EXPRESSION:*/120 * * * * *}
#vote.commitment.cron.expression=0 0/30 * * * ?
vote.commitment.enabled=${VOTE_COMMITMENT_ENABLED:true}

# value very specific to the network
expiration.slot.buffer=${EXPIRATION_SLOT_BUFFER:300}

server.port=9091

spring.task.scheduling.pool.size=${SCHEDULING_POOL_SIZE:5}

# default spring profile is a development profile with an external preprod environment
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev--preprod}
cors.allowed.origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000}

spring.flyway.validateMigrationNaming=true

ledger.follower.app.base.url=${LEDGER_FOLLOWER_APP_URL:http://localhost:9090}