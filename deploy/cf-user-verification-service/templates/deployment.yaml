apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "user-verification-service.fullname" . }}
  labels:
    {{- include "user-verification-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "user-verification-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "user-verification-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
#            - name: SPRING_PROFILES_ACTIVE
#              value: {{ .springProfiles }}
            - name: CARDANO_NETWORK
              value: {{ .Values.network | default "preprod" | upper}}
            - name: CORS_ALLOWED_ORIGINS
              value: {{ tpl $.Values.corsAllowedOrigins $ }}

            ## Postgres
            - name: DB_DRIVER
              value: "org.postgresql.Driver"
            - name: DB_DIALECT
              value: "org.hibernate.dialect.PostgreSQLDialect"
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PORT
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_DB
            - name: DB_SCHEMA
              value: {{ .Values.dbSchema | default "public" }}
            - name: DB_URL
              value: jdbc:postgresql://$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?currentSchema=$(DB_SCHEMA)
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD

            ## SNS Text
            - name: AWS_SNS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: sns-secrets
                  key: AWS_SNS_ACCESS_KEY_ID

            - name: AWS_SNS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: sns-secrets
                  key: AWS_SNS_SECRET_ACCESS_KEY

            - name: AWS_SNS_REGION
              valueFrom:
                secretKeyRef:
                  name: sns-secrets
                  key: AWS_SNS_REGION

            - name: LEDGER_FOLLOWER_APP_URL
              value: {{ $.Values.ledgerFollowerAppUrl }}

            - name: DISCORD_BOT_EVENT_ID_BINDING
              value: {{ $.Values.discordBotEventIdBinding }}

            - name: SALT
              valueFrom:
                secretKeyRef:
                  name: user-verification-secrets
                  key: SALT

            - name: DISCORD_BOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: BACKEND_BASIC_AUTH_USER
            - name: DISCORD_BOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: discord-secrets
                  key: BACKEND_BASIC_AUTH_PASSWORD

          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
